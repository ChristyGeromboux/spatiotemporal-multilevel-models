source('~/projects/2_mixed_effects_vs_basic_regresson/varying_slopes_in_basic_regression.R')
plot(dat$z, dat$y)
dat <- read.csv("data/simulated_data.csv")
plot(dat$z, dat$y)
dat <- read.csv("data/simulated_data.csv")
dat <- read.csv("../2_mixed_effects_vs_basic_regression/data/simulated_data.csv")
dir("..")
dat <- read.csv("../2_mixed_effects_vs_basic_regression/data/simulated_data.csv")
simulated_data <- read.csv("/projects/student1/2_mixed_effects_vs_basic_regresson/data/simulated_data.csv")
View(simulated_data)
dat <- read.csv("../2_mixed_effects_vs_basic_regresson/data/simulated_data.csv")
plot(dat$z, dat$y)
plot(dat$x, dat$y)
plot(dat$z, dat$y)
plot(density(dat$y))
plot(dat$z, dat$y)
dat <- dat[dat$z != "group3"]
dat <- dat[dat$z != "group3",]
str(dat)
summary(dat)
plot(dat$x, dat$y)
plot(dat$z, dat$y)
plot(density(dat$y))
fit0 <- lm(y ~ x, data = dat)
summary(fit0)
fit0cf <- coefficients(fit0)
with(dat, plot(x, y, col = z))
abline(fit0cf[1], fit0cf[2])
my_plot <- function(dat){
par(mar = c(3,3,2,1))
plot(1, type="n", xlim=c(-0.3,6), ylim=c(-1,0.5), xlab="", ylab="", axes = F)
axis(1, labels = F); axis(2, labels = F)
mtext("Y", 2, 1 , at = 0, las = 2)
mtext("X", 1, 1 , at = 3)
with(subset(dat, z == "group1"), points(x, y,  pch = 1, cex = .5))
with(subset(dat, z == "group2"), points(x, y, pch = 3, cex = .5))
}
my_plot(dat)
fit  <- lm(y ~ x * z, data = dat)
summary(fit3)
fit2  <- lm(y ~ x * z, data = dat)
summary(fit2)
title(expression(paste("Regression model Y = ", beta[0] + beta[1],"X + ", beta[2], "Z + ", beta[3], "XZ + ", epsilon )))
fit3  <- lm(y ~ x * z, data = dat)
summary(fit3)
# this is a different equation
title(expression(paste("Regression model Y = ", beta[0] + beta[1],"X + ", beta[2], "Z + ", beta[3], "XZ + ", epsilon )))
fit3cf <- coefficients(fit3)
b0   <- fit3cf[1]
b1   <- fit3cf[2]
b2.1 <- fit3cf[3]
b3.1 <- fit3cf[5]
b3.1 <- fit3cf[4]
abline(b0, b1)
abline(b0+b2.1, b1+b3.1)
dat <- read.csv("../2_mixed_effects_vs_basic_regresson/data/simulated_data.csv")
str(dat)
summary(dat)
plot(dat$x, dat$y)
plot(dat$z, dat$y)
plot(density(dat$y))
with(dat, plot(x, y, col = z))
legend("topleft", legend = 1:3, fill = 1:3)
dat <- dat[dat$z != "group3",]
fit0 <- lm(y ~ x, data = dat)
summary(fit0)
fit0cf <- coefficients(fit0)
with(dat, plot(x, y, col = z))
abline(fit0cf[1], fit0cf[2])
par(mar = c(3,3,2,1))
plot(1, type="n", xlim=c(-0.3,6), ylim=c(-1,0.5), xlab="", ylab="", axes = F)
axis(1, labels = F); axis(2, labels = F)
mtext("Y", 2, 1 , at = 0, las = 2)
mtext("X", 1, 1 , at = 3)
with(subset(dat, z == "group1"), points(x, y,  pch = 1, cex = .5))
with(subset(dat, z == "group2"), points(x, y, pch = 3, cex = .5))
dat <- read.csv("../2_mixed_effects_vs_basic_regresson/data/simulated_data.csv")
str(dat)
summary(dat)
plot(dat$x, dat$y)
plot(dat$z, dat$y)
plot(density(dat$y))
with(dat, plot(x, y, col = z))
legend("topleft", legend = 1:3, fill = 1:3)
# subset
dat <- dat[dat$z != "group3",]
# basic linear model
fit1 <- lm(y ~ x, data = dat)
summary(fit1)
fit1cf <- coefficients(fit1)
with(dat, plot(x, y, col = z))
abline(fit1cf[1], fit1cf[2])
# step 2: we suspect a group level effect! begin to build multilevel model(s)
par(mar = c(3,3,2,1))
plot(1, type="n", xlim=c(-0.3,6), ylim=c(-1,0.5), xlab="", ylab="", axes = F)
axis(1, labels = F); axis(2, labels = F)
mtext("X", 1, 1 , at = 3)
mtext("Y", 2, 1 , at = 0, las = 2)
with(subset(dat, z == "group1"), points(x, y,  pch = 1, cex = .5))
with(subset(dat, z == "group2"), points(x, y, pch = 3, cex = .5))
fit  <- lm(y ~ x * z, data = dat)
summary(fit2)
# a multiplicative interaction term
fit2  <- lm(y ~ x * z, data = dat)
summary(fit2)
# this is a different equation
title(expression(paste("Regression model Y = ", beta[0] + beta[1],"X + ", beta[2], "Z + ", beta[3], "XZ + ", epsilon )))
fit2cf <- coefficients(fit2)
b0   <- fit2cf[1]
b1   <- fit2cf[2]
b2.1 <- fit2cf[3]
#b2.2 <- fit2cf[4]
b3.1 <- fit2cf[4]
#b3.2 <- fit2cf[6]
abline(b0, b1)
abline(b0+b2.1, b1+b3.1)
text(x = 2.8, y = 0.2, expression(paste("Y = (", beta[0] + beta[2],") + (", beta[1] + beta [3],")X when Z = 1")))
text(x = 1.9, y = 0.1, expression(paste("Slope = ", beta[1] + beta[3])))
text(x = -0.3, y = -.75, expression(beta[0]))
text(x = -0.3, y = -0.4, expression(beta[2]))
text(x = 3.57, y = -0.7,  expression(paste("Y = ", beta[0] + beta[1] ,"X when Z = 0")))
text(x = 3, y = -0.8, expression(paste("Slope = ", beta[1])))
segments(0, b0, 0, b2, lty = 1, col = 'grey', lwd = 6)
b0   <- fit2cf[1]
b1   <- fit2cf[2]
b2 <- fit2cf[3]
b3 <- fit2cf[4]
abline(b0, b1)
abline(b0+b2.1, b1+b3.1)
text(x = 2.8, y = 0.2, expression(paste("Y = (", beta[0] + beta[2],") + (", beta[1] + beta [3],")X when Z = 1")))
text(x = 1.9, y = 0.1, expression(paste("Slope = ", beta[1] + beta[3])))
text(x = -0.3, y = -.75, expression(beta[0]))
text(x = -0.3, y = -0.4, expression(beta[2]))
text(x = 3.57, y = -0.7,  expression(paste("Y = ", beta[0] + beta[1] ,"X when Z = 0")))
text(x = 3, y = -0.8, expression(paste("Slope = ", beta[1])))
segments(0, b0, 0, b2, lty = 1, col = 'grey', lwd = 6)
segments(-.9, b2, 0, b2, lty = 3)
segments(-.9, b0, 0, b0, lty = 3)
segments(0, b2, 0, -1, lty = 3)
#### name: basic regression model with varying intercepts and varying slopes ####
dat <- read.csv("../2_mixed_effects_vs_basic_regresson/data/simulated_data.csv")
# step one: exploratory work
str(dat)
summary(dat)
plot(dat$x, dat$y)
plot(dat$z, dat$y)
plot(density(dat$y))
with(dat, plot(x, y, col = z))
legend("topleft", legend = 1:3, fill = 1:3)
# subset
dat <- dat[dat$z != "group3",]
# basic linear model
fit1 <- lm(y ~ x, data = dat)
summary(fit1)
fit1cf <- coefficients(fit1)
with(dat, plot(x, y, col = z))
abline(fit1cf[1], fit1cf[2])
# step 2: we suspect a group level effect! begin to build multilevel model(s)
par(mar = c(3,3,2,1))
plot(1, type="n", xlim=c(-0.3,6), ylim=c(-1,0.5), xlab="", ylab="", axes = F)
axis(1, labels = F); axis(2, labels = F)
mtext("Y", 2, 1 , at = 0, las = 2)
mtext("X", 1, 1 , at = 3)
with(subset(dat, z == "group1"), points(x, y,  pch = 1, cex = .5))
with(subset(dat, z == "group2"), points(x, y, pch = 3, cex = .5))
# a multiplicative interaction term
fit2  <- lm(y ~ x * z, data = dat)
summary(fit2)
# this is a different equation
title(expression(paste("Regression model Y = ", beta[0] + beta[1],"X + ", beta[2], "Z + ", beta[3], "XZ + ", epsilon )))
fit2cf <- coefficients(fit2)
b0   <- fit2cf[1]
b1   <- fit2cf[2]
b2 <- fit2cf[3]
b3 <- fit2cf[4]
abline(b0, b1)
abline(b0+b2.1, b1+b3.1)
text(x = 2.8, y = 0.2, expression(paste("Y = (", beta[0] + beta[2],") + (", beta[1] + beta [3],")X when Z = 1")))
text(x = 1.9, y = 0.1, expression(paste("Slope = ", beta[1] + beta[3])))
text(x = -0.3, y = -.75, expression(beta[0]))
text(x = -0.3, y = -0.4, expression(beta[2]))
text(x = 3.57, y = -0.7,  expression(paste("Y = ", beta[0] + beta[1] ,"X when Z = 0")))
text(x = 3, y = -0.8, expression(paste("Slope = ", beta[1])))
fit2cf
segments(0, b0, 0, b0+b2, lty = 1, col = 'grey', lwd = 6)
text(x = -0.3, y = -.75, expression(beta[0]))
segments(-.9, b2, 0, b2, lty = 3)
segments(-.9, b0+b2, 0, b0+b2, lty = 3)
segments(-.9, b0, 0, b0, lty = 3)
segments(0, b2, 0, -1, lty = 3)
segments(0, b0+b2, 0, -1, lty = 3)
source('~/projects/2_mixed_effects_vs_basic_regresson/varying_slopes_in_basic_regression.R')
dat <- read.csv("~/projects/2_mixed_effects_vs_basic_regresson/data/simulated_data.csv")
str(dat)
summary(dat)
plot(dat$x, dat$y)
plot(dat$z, dat$y)
plot(density(dat$y))
with(dat, plot(x, y, col = z))
legend("topleft", legend = 1:3, fill = 1:3)
dat <- dat[dat$z != "group3",]
# subset
str(dat)
table(dat$z)
dat$z <- factor(dat$z)
table(dat$z)
fit1 <- lm(y ~ x, data = dat)
summary(fit1)
fit1cf <- coefficients(fit1)
with(dat, plot(x, y, col = z))
abline(fit1cf[1], fit1cf[2])
# we suspect a group level effect! begin to build multilevel model(s)
par(mar = c(3,3,2,1))
plot(1, type="n", xlim=c(-0.3,6), ylim=c(-1,0.5), xlab="", ylab="", axes = F)
axis(1, labels = F); axis(2, labels = F)
mtext("Y", 2, 1 , at = 0, las = 2)
mtext("X", 1, 1 , at = 3)
with(subset(dat, z == "group1"), points(x, y,  pch = 1, cex = .5))
with(subset(dat, z == "group2"), points(x, y, pch = 3, cex = .5))
# a multiplicative interaction term
fit2  <- lm(y ~ x * z, data = dat)
summary(fit2)
title(expression(paste("Regression model Y = ", beta[0] + beta[1],"X + ", beta[2], "Z + ", beta[3], "XZ + ", epsilon )))
fit2cf <- coefficients(fit2)
b0 <- fit2cf[1]
b1 <- fit2cf[2]
b2 <- fit2cf[3]
b3 <- fit2cf[4]
abline(b0, b1)
abline(b0+b2, b1+b3)
text(x = 2.8, y = 0.2, expression(paste("Y = (", beta[0] + beta[2],") + (", beta[1] + beta [3],")X when Z = 1")))
text(x = 1.9, y = 0.1, expression(paste("Slope = ", beta[1] + beta[3])))
text(x = -0.3, y = -.75, expression(beta[0]))
segments(0, b0, 0, b0+b2, lty = 1, col = 'grey', lwd = 6)
text(x = -0.3, y = -0.4, expression(beta[2]))
segments(-.9, b0+b2, 0, b0+b2, lty = 3)
text(x = 3.57, y = -0.7,  expression(paste("Y = ", beta[0] + beta[1] ,"X when Z = 0")))
text(x = 3, y = -0.8, expression(paste("Slope = ", beta[1])))
segments(-.9, b0, 0, b0, lty = 3)
segments(0, b0+b2, 0, -1, lty = 3)
install.packages("seasonal")
a <- 1
a
a <- 1
a
a <- "abc"
a
x <- 1:100
x
y <- x^2
plot(x, y)
y <- x^2 + rnorm(100, 0, 1)
plot(x, y)
y <- x^2 + rnorm(100, 0, 1)
# and plotting
plot(x, y)
y <- x^2 + rnorm(100, 0, 10)
# and plotting
plot(x, y)
y <- x^2 + sample(rnorm(10000, 0, 1), 100)
plot(x, y)
y <- x^2 + sample(rnorm(10000, 0, 10), 100)
# and plotting
plot(x, y)
y <- x^2 + sample(rnorm(10000, 0, 1000), 100)
plot(x, y)
# and plotting
library(mgcv)
fit <- gam(y ~ x, data = dat)
fit <- gam(y ~ x)
plot(fit)
summary(fit)
fit <- gam(y ~ s(x))
summary(fit)
plot(fit)
if(!require(seasonal)){
install.packages("seasonal")
}; library(seasonal)
data(chicago)
data(chic)
str(chicago)
str(chic)
??seasonal
if(!require(season)){
install.packages("season")
}; library(season)
??season
data(CVDdaily)
?CVDdaily
str(CVDdaily)
summary(CVDdaily)
plot(CVDdaily$date, CVDdaily$cvd, type='p', xlab='Date',
ylab='Number of CVD deaths')
plot(CVDdaily$date, CVDdaily$cvd, type='l', xlab='Date',
ylab='Number of CVD deaths')
plot(CVDdaily$date, CVDdaily$cvd, type='l')
plot(CVDdaily$dow, CVDdaily$cvd)
plot(density(CVDdaily$cvd))
fit2 <- glm(cvd ~ tmpd + dow, family = "poisson")
fit2 <- glm(cvd ~ tmpd + dow, data = CVDdaily, family = "poisson")
summary(fit)
summary(fit2)
termplot(fit2, terms = 1, se = T)
library(splines)
fit3 <- glm(cvd ~ ns(tmpd, df = 4) + dow, data = CVDdaily, family = "poisson")
summary(fit3)
termplot(fit3, terms = 1, se = T)
aic2 <- AIC(fit2)
aic3 <- AIC(fit3)
min(c(aic2, aic3))
mad <- min(c(aic2, aic3))
(aic2 - mad)
(aic3 - mad)
aicmin <- min(c(aic2, aic3))
aic_table <- data.frame(aic2 = AIC(fit2), aic3 = AIC(fit3))
aic_table
aicmin <- min(aic_table)
aicmin
(aic_table - aicmin)
(aic_table - aic_min)
aic_min <- min(aic_table)
aic_min <- min(aic_table)
(aic_table - aic_min)
aic_table <- data.frame(aic2 = AIC(fit2), aic3 = AIC(fit3))
aic_min <- min(aic_table)
(aic_table - aic_min)
plot(fit3)
par(mfrow = c(2,2))
plot(fit3)
a <- 1
# e.g. numbers
a
# or characters
a <- "abc"
a
x <- 1:100
# and vectors
x
# math functions and simulating from a range of distributions
y <- x^2 + sample(rnorm(10000, 0, 1000), 100)
# and plotting
plot(x, y)
# R is a scripted programming language for statistics and graphics
# some packages are shipped with the base installation
library(mgcv)
fit <- gam(y ~ s(x))
summary(fit)
plot(fit)
if(!require(season)){
install.packages("season")
}; library(season)
# sometimes with well documented help files
??season
# these can also contain data
data(CVDdaily)
?CVDdaily
# str means structure
str(CVDdaily)
summary(CVDdaily)
# sometimes you specify different plot types
plot(CVDdaily$date, CVDdaily$cvd, type='l')
# other times R knows based on the type of data
plot(CVDdaily$dow, CVDdaily$cvd)
# generalised linear models with non-gausian responses
fit2 <- glm(cvd ~ tmpd + dow, data = CVDdaily, family = "poisson")
summary(fit2)
# partial residual plots are fun
termplot(fit2, terms = 1, se = T)
# and so are parametric smoothing splines
library(splines)
fit3 <- glm(cvd ~ ns(tmpd, df = 4) + dow, data = CVDdaily, family = "poisson")
summary(fit3)
# partial residual plots are fun
termplot(fit3, terms = 1, se = T)
# and post estimation statistics
aic_table <- data.frame(aic2 = AIC(fit2), aic3 = AIC(fit3))
aic_min <- min(aic_table)
(aic_table - aic_min)
# model fit3 is substantially better than fit2
# and diagnostics like cooks distance and leverage
par(mfrow = c(2,2))
plot(fit3)
infile <- dir(file.path(system.file(package = "readstata13"), "extdata"), full.names = T)
library(readstata13)
infile
infile <- dir(file.path(system.file(package = "readstata13"), "extdata"), full.names = T, pattern = ".dta")
infile
dat <- read.dta13(infile)
str(dat)
